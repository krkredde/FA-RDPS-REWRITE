// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767px
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - 1px, null);
}

// Creates text alignment classes based on screen size
// TODO this would be nice to add to the framework
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Provide text `[text-{bp}]` attributes for aligning text based on screen size
    [text#{$infix}-center] {
      text-align: center;
    }

    [text#{$infix}-left] {
      text-align: left;
    }

    [text#{$infix}-right] {
      text-align: right;
    }

    [hidden#{$infix}-up] {
      display: none;
    }
  }

  @include media-breakpoint-down($breakpoint, $grid-breakpoints) {
    [hidden#{$infix}-down] {
      display: none;
    }
  }
}

.btn {
  height: 100Px;
  width: 140px;
  align-self: center;
  font-size: 1.2rem;
  font-weight: 500;
  text-transform: capitalize;
  color: #242725;
  text-align: center;
  padding: 3px 3px;
  border-width:2px;
}

.default-white-color {
  color: #242725;
  ion-icon {
    font-size: 30px;
  }
  .fa, .fas, .far{
    font-size: 30px;
  }
}

.default-white-color:hover {
  background-color: #387ef5 !important;
  color: whitesmoke !important;
}

.faGreen {
  color: #28a54c;
}

.faOrange {
  color: #ff6600;
}

.faLightBlue {
  color: #31C0E6;
}

.faYellow {
  color: #f2c100;
}

.form-img {
  max-height: 120px;
}
.form-img2 {
  max-height: 200px;
  width: 100%;
  margin-bottom: -25px;
  margin-top: -20px;
}
.form-img3 {
  max-height: 200px;
  width: 100%;
  margin-bottom: -25px;
  margin-top: -20px;
}